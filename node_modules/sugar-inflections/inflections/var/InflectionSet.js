'use strict';

var classChecks = require('../../common/var/classChecks'),
    coreUtilityAliases = require('../../common/var/coreUtilityAliases');

var isString = classChecks.isString,
    getOwn = coreUtilityAliases.getOwn;

var InflectionSet;

function buildInflectionSet() {

  InflectionSet = function() {
    this.map = {};
    this.rules = [];
  };

  InflectionSet.prototype = {

    add: function(rule, replacement) {
      if (isString(rule)) {
        this.map[rule] = replacement;
      } else {
        this.rules.unshift({
          rule: rule,
          replacement: replacement
        });
      }
    },

    inflect: function(str) {
      var arr, idx, word;

      arr = str.split(' ');
      idx = arr.length - 1;
      word = arr[idx];

      arr[idx] = this.find(word) || this.runRules(word);
      return arr.join(' ');
    },

    find: function(str) {
      return getOwn(this.map, str);
    },

    runRules: function(str) {
      for (var i = 0, r; r = this.rules[i]; i++) {
        if (r.rule.test(str)) {
          str = str.replace(r.rule, r.replacement);
          break;
        }
      }
      return str;
    }

  };

}

buildInflectionSet();

module.exports = InflectionSet;